"use strict"
// Module export pattern from
// https://github.com/umdjs/umd/blob/master/returnExports.js
; (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.store = factory();
    }
}(this, function () {

    // Store.js
    var store = {},
		win = window,
		doc = win.document,
		localStorageName = 'localStorage',
		scriptTag = 'script',
		storage

    store.disabled = false
    store.version = '1.3.17'
    store.set = function (key, value) { }
    store.get = function (key, defaultVal) { }
    store.has = function (key) { return store.get(key) !== undefined }
    store.remove = function (key) { }
    store.clear = function () { }
    store.transact = function (key, defaultVal, transactionFn) {
        if (transactionFn == null) {
            transactionFn = defaultVal
            defaultVal = null
        }
        if (defaultVal == null) {
            defaultVal = {}
        }
        var val = store.get(key, defaultVal)
        transactionFn(val)
        store.set(key, val)
    }
    store.getAll = function () { }
    store.forEach = function () { }

    store.serialize = function (value) {
        return JSON.stringify(value)
    }
    store.deserialize = function (value) {
        if (typeof value != 'string') { return undefined }
        try { return JSON.parse(value) }
        catch (e) { return value || undefined }
    }

    // Functions to encapsulate questionable FireFox 3.6.13 behavior
    // when about.config::dom.storage.enabled === false
    // See https://github.com/marcuswestin/store.js/issues#issue/13
    function isLocalStorageNameSupported() {
        try { return (localStorageName in win && win[localStorageName]) }
        catch (err) { return false }
    }

    if (isLocalStorageNameSupported()) {
        storage = win[localStorageName]
        store.set = function (key, val) {
            if (val === undefined) { return store.remove(key) }
            storage.setItem(key, store.serialize(val))
            return val
        }
        store.get = function (key, defaultVal) {
            var val = store.deserialize(storage.getItem(key))
            return (val === undefined ? defaultVal : val)
        }
        store.remove = function (key) { storage.removeItem(key) }
        store.clear = function () { storage.clear() }
        store.getAll = function () {
            var ret = {}
            store.forEach(function (key, val) {
                ret[key] = val
            })
            return ret
        }
        store.forEach = function (callback) {
            for (var i = 0; i < storage.length; i++) {
                var key = storage.key(i)
                callback(key, store.get(key))
            }
        }
    } else if (doc.documentElement.addBehavior) {
        var storageOwner,
			storageContainer
        // Since #userData storage applies only to specific paths, we need to
        // somehow link our data to a specific path.  We choose /favicon.ico
        // as a pretty safe option, since all browsers already make a request to
        // this URL anyway and being a 404 will not hurt us here.  We wrap an
        // iframe pointing to the favicon in an ActiveXObject(htmlfile) object
        // (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
        // since the iframe access rules appear to allow direct access and
        // manipulation of the document element, even for a 404 page.  This
        // document can be used instead of the current document (which would
        // have been limited to the current path) to perform #userData storage.
        try {
            storageContainer = new ActiveXObject('htmlfile')
            storageContainer.open()
            storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>')
            storageContainer.close()
            storageOwner = storageContainer.w.frames[0].document
            storage = storageOwner.createElement('div')
        } catch (e) {
            // somehow ActiveXObject instantiation failed (perhaps some special
            // security settings or otherwse), fall back to per-path storage
            storage = doc.createElement('div')
            storageOwner = doc.body
        }
        var withIEStorage = function (storeFunction) {
            return function () {
                var args = Array.prototype.slice.call(arguments, 0)
                args.unshift(storage)
                // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
                // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
                storageOwner.appendChild(storage)
                storage.addBehavior('#default#userData')
                storage.load(localStorageName)
                var result = storeFunction.apply(store, args)
                storageOwner.removeChild(storage)
                return result
            }
        }

        // In IE7, keys cannot start with a digit or contain certain chars.
        // See https://github.com/marcuswestin/store.js/issues/40
        // See https://github.com/marcuswestin/store.js/issues/83
        var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g")
        var ieKeyFix = function (key) {
            return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
        }
        store.set = withIEStorage(function (storage, key, val) {
            key = ieKeyFix(key)
            if (val === undefined) { return store.remove(key) }
            storage.setAttribute(key, store.serialize(val))
            storage.save(localStorageName)
            return val
        })
        store.get = withIEStorage(function (storage, key, defaultVal) {
            key = ieKeyFix(key)
            var val = store.deserialize(storage.getAttribute(key))
            return (val === undefined ? defaultVal : val)
        })
        store.remove = withIEStorage(function (storage, key) {
            key = ieKeyFix(key)
            storage.removeAttribute(key)
            storage.save(localStorageName)
        })
        store.clear = withIEStorage(function (storage) {
            var attributes = storage.XMLDocument.documentElement.attributes
            storage.load(localStorageName)
            while (attributes.length) {
                storage.removeAttribute(attributes[0].name)
            }
            storage.save(localStorageName)
        })
        store.getAll = function (storage) {
            var ret = {}
            store.forEach(function (key, val) {
                ret[key] = val
            })
            return ret
        }
        store.forEach = withIEStorage(function (storage, callback) {
            var attributes = storage.XMLDocument.documentElement.attributes
            for (var i = 0, attr; attr = attributes[i]; ++i) {
                callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
            }
        })
    }

    try {
        var testKey = '__storejs__'
        store.set(testKey, testKey)
        if (store.get(testKey) != testKey) { store.disabled = true }
        store.remove(testKey)
    } catch (e) {
        store.disabled = true
    }
    store.enabled = !store.disabled

    return store
}));

/**
 * This work is licensed under the Creative Commons Attribution-Share Alike 3.0
 * United States License. To view a copy of this license,
 * visit http://creativecommons.org/licenses/by-sa/3.0/us/ or send a letter
 * to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
 *
 * Modified by: Jill Elaine
 * Email: jillelaine01@gmail.com
 *
 * Configurable idle (no activity) timer and logout redirect for jQuery.
 * Works across multiple windows, tabs and iframes from the same domain.
 *
 * Dependencies: JQuery v1.7+, JQuery UI, store.js from https://github.com/marcuswestin/store.js - v1.3.4+
 *
 * version 1.0.10
 **/

/*global jQuery: false, document: false, store: false, clearInterval: false, setInterval: false, setTimeout: false, clearTimeout: false, window: false, alert: false*/
/*jslint indent: 2, sloppy: true, plusplus: true*/

(function ($) {

    $.fn.idleTimeout = function (userRuntimeConfig) {

        //##############################
        //## Public Configuration Variables
        //##############################
        var defaultConfig = {
            redirectUrl: '/logout',      // redirect to this url on logout. Set to "redirectUrl: false" to disable redirect

            // idle settings
            idleTimeLimit: 1200,           // 'No activity' time limit in seconds. 1200 = 20 Minutes
            idleCheckHeartbeat: 2,       // Frequency to check for idle timeouts in seconds

            // optional custom callback to perform before logout
            customCallback: false,       // set to false for no customCallback
            // customCallback:    function () {    // define optional custom js function
            // perform custom action before logout
            // },

            // configure which activity events to detect
            // http://www.quirksmode.org/dom/events/
            // https://developer.mozilla.org/en-US/docs/Web/Reference/Events
            activityEvents: 'click keypress scroll wheel mousewheel mousemove', // separate each event with a space

            // warning dialog box configuration
            enableDialog: true,           // set to false for logout without warning dialog
            useTopBar: false,
            topBarText: 'You will be logged off in <span id="idletimeout-seconds">{seconds}</span>&nbsp;seconds due to inactivity. ' +
                '<a id="idletimeout-resume" href="javascript:;" style="color:#fff; font-weight:bold; font-size: 14px; text-decoration: underline;">Click here to continue using this web page</a>.',
            dialogDisplayLimit: 180,       // Time to display the warning dialog before logout (and optional callback) in seconds. 180 = 3 Minutes
            dialogTitle: 'Session Expiration Warning', // also displays on browser title bar
            dialogText: 'Because you have been inactive, your session is about to expire.',
            dialogTimeRemaining: 'Time remaining',
            dialogStayLoggedInButton: 'Stay Logged In',
            dialogLogOutNowButton: 'Log Out Now',

            // error message if https://github.com/marcuswestin/store.js not enabled
            errorAlertMessage: 'Please disable "Private Mode", or upgrade to a modern browser. Or perhaps a dependent file missing. Please see: https://github.com/marcuswestin/store.js',

            // server-side session keep-alive timer
            sessionKeepAliveTimer: 600,   // ping the server at this interval in seconds. 600 = 10 Minutes. Set to false to disable pings
            sessionKeepAliveUrl: window.location.href // set URL to ping - does not apply if sessionKeepAliveTimer: false
        },

        //##############################
        //## Private Variables
        //##############################
          currentConfig = $.extend(defaultConfig, userRuntimeConfig), // merge default and user runtime configuration
          origTitle = document.title, // save original browser title
          storeConfiguration, // public function support, store private configuration variables
          activityDetector,
          startKeepSessionAlive, stopKeepSessionAlive, keepSession, keepAlivePing, // session keep alive
          idleTimer, remainingTimer, checkIdleTimeout, checkIdleTimeoutLoop, startIdleTimer, stopIdleTimer, // idle timer
          openWarningDialog, dialogTimer, checkDialogTimeout, startDialogTimer, stopDialogTimer, isDialogOpen, destroyWarningDialog, countdownDisplay, // warning dialog
          logoutUser,
          checkForIframes, includeIframes, attachEventIframe; // iframes

        //##############################
        //## Public Functions
        //##############################
        // trigger a manual user logout
        // use this code snippet on your site's Logout button: $.fn.idleTimeout().logout();
        this.logout = function () {
            store.set('idleTimerLoggedOut', true);
        };

        // trigger a recheck for iframes
        // use this code snippet after an iframe is inserted into the document: $.fn.idleTimeout().iframeRecheck()
        this.iframeRecheck = function () {
            checkForIframes();
        };

        //##############################
        //## Private Functions
        //##############################
        //----------- PUBLIC FUNCTION SUPPORT --------------//
        // WORK AROUND - save currentConfig.activityEvents value to 'store.js' variable for use in function: attachEventIframe
        storeConfiguration = function () {
            store.set('activityEvents', currentConfig.activityEvents);
        };

        //----------- KEEP SESSION ALIVE FUNCTIONS --------------//
        startKeepSessionAlive = function () {

            keepSession = function () {
                $.get(currentConfig.sessionKeepAliveUrl + '?' + new Date().getTime());
                startKeepSessionAlive();
            };

            keepAlivePing = setTimeout(keepSession, (currentConfig.sessionKeepAliveTimer * 1000));
        };

        stopKeepSessionAlive = function () {
            clearTimeout(keepAlivePing);
        };

        var mouseX, mouseY;
        activityDetector = function () {

            $('body').on(currentConfig.activityEvents, function (e) {

                if (e.type == 'mousemove') {

                    if (e.clientX == mouseX && e.clientY == mouseY) {
                        //mouse has not really moved, chrome mousemove bug
                        return;
                    }
                    mouseX = e.clientX;
                    mouseY = e.clientY;
                }

                if (!currentConfig.enableDialog || (currentConfig.enableDialog && isDialogOpen() !== true)) {
                    startIdleTimer();
                }
            });
        };

        //----------- IDLE TIMER FUNCTIONS --------------//
        checkIdleTimeout = function () {

            var timeIdleTimeout = (store.get('idleTimerLastActivity') + (currentConfig.idleTimeLimit * 1000));

            if ($.now() > timeIdleTimeout) {

                if (!currentConfig.enableDialog) { // warning dialog is disabled
                    logoutUser(); // immediately log out user when user is idle for idleTimeLimit
                } else if (currentConfig.enableDialog && isDialogOpen() !== true) {
                    openWarningDialog();
                    startDialogTimer(); // start timing the warning dialog
                }
            } else if (store.get('idleTimerLoggedOut') === true) { //a 'manual' user logout?
                logoutUser();
            } else {

                if (currentConfig.enableDialog && isDialogOpen() === true) {
                    destroyWarningDialog();
                    stopDialogTimer();
                }
            }
        };

        startIdleTimer = function () {
            stopIdleTimer();
            store.set('idleTimerLastActivity', $.now());
            checkIdleTimeoutLoop();
        };

        checkIdleTimeoutLoop = function () {
            checkIdleTimeout();
            idleTimer = setTimeout(checkIdleTimeoutLoop, (currentConfig.idleCheckHeartbeat * 1000));
        };

        stopIdleTimer = function () {
            clearTimeout(idleTimer);
        };

        //----------- WARNING DIALOG FUNCTIONS --------------//
        openWarningDialog = function () {
            if (currentConfig.useTopBar) {
                var b = $('<div/>').attr('id', 'idletimeout')
                    .addClass("ui-front")
                    .attr('style', 'background:#CC5100; border:3px solid #FF6500; color:#fff; font-family:arial, sans-serif; text-align:center; font-size:14px; padding:10px; position:absolute; top:0px; left:0; right:0; z-index:100000;')
                    .html(currentConfig.topBarText.replace('{seconds}', currentConfig.dialogDisplayLimit))
                    .appendTo(document.body);

                $('#idletimeout-resume').click(function () {
                    destroyWarningDialog();
                    stopDialogTimer();
                    startIdleTimer();
                });

            }
            else {
                var dialogContent = "<div id='idletimer_warning_dialog'><p>" + currentConfig.dialogText + "</p><p style='display:inline'>" + currentConfig.dialogTimeRemaining + ": <div style='display:inline' id='countdownDisplay'></div></p></div>";

                $(dialogContent).dialog({
                    buttons: [{
                        text: currentConfig.dialogStayLoggedInButton,
                        click: function () {
                            destroyWarningDialog();
                            stopDialogTimer();
                            startIdleTimer();
                        }
                    },
                      {
                          text: currentConfig.dialogLogOutNowButton,
                          click: function () {
                              logoutUser();
                          }
                      }
                    ],
                    closeOnEscape: false,
                    modal: true,
                    title: currentConfig.dialogTitle,
                    open: function () {
                        $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close').hide();
                    }
                });
            }

            countdownDisplay();

            document.title = currentConfig.dialogTitle;

            if (currentConfig.sessionKeepAliveTimer) {
                stopKeepSessionAlive();
            }
        };

        checkDialogTimeout = function () {
            var timeDialogTimeout = (store.get('idleTimerLastActivity') + (currentConfig.idleTimeLimit * 1000) + (currentConfig.dialogDisplayLimit * 1000));

            if (($.now() > timeDialogTimeout) || (store.get('idleTimerLoggedOut') === true)) {
                logoutUser();
            }
        };

        startDialogTimer = function () {
            dialogTimer = setInterval(checkDialogTimeout, (currentConfig.idleCheckHeartbeat * 1000));
        };

        stopDialogTimer = function () {
            clearInterval(dialogTimer);
            clearInterval(remainingTimer);
        };

        isDialogOpen = function () {
            var dialogOpen = $('#idletimeout').is(':visible') ||
                $("#idletimer_warning_dialog").is(":visible");

            if (dialogOpen === true) {
                return true;
            }
            return false;
        };

        destroyWarningDialog = function () {
            if (currentConfig.useTopBar)
                $('#idletimeout').remove();
            else
                $("#idletimer_warning_dialog").dialog('destroy').remove();
            document.title = origTitle;

            if (currentConfig.sessionKeepAliveTimer) {
                startKeepSessionAlive();
            }
        };

        countdownDisplay = function () {
            var mins, secs;
            remainingTimer = setInterval(function () {
                var timeDialogTimeout = (store.get('idleTimerLastActivity') + (currentConfig.idleTimeLimit * 1000) + (currentConfig.dialogDisplayLimit * 1000));
                var dialogDisplaySeconds = Math.ceil(((timeDialogTimeout - $.now()) / 1000));
                if (dialogDisplaySeconds < 1)
                    dialogDisplaySeconds = 1;
                mins = Math.floor(dialogDisplaySeconds / 60); // minutes
                if (mins < 10) { mins = '0' + mins; }
                secs = dialogDisplaySeconds - (mins * 60); // seconds
                if (secs < 10) { secs = '0' + secs; }
                $('#idletimeout-seconds').text(dialogDisplaySeconds);
                $('#countdownDisplay').html(mins + ':' + secs);
            }, 500);
        };

        //----------- LOGOUT USER FUNCTION --------------//
        logoutUser = function () {
            store.set('idleTimerLoggedOut', true);

            if (currentConfig.sessionKeepAliveTimer) {
                stopKeepSessionAlive();
            }

            if (currentConfig.customCallback) {
                currentConfig.customCallback();
            }

            if (currentConfig.redirectUrl) {
                window.location.href = currentConfig.redirectUrl;
            }
        };

        //----------- IFRAME FUNCTIONS --------------//
        $("body").on("dialogopen", function () {

            if (currentConfig.enableDialog && isDialogOpen() !== true) {
                checkForIframes();
            }
        });

        // document must be in readyState 'complete' before checking for iframes - $(document).ready() is not good enough!
        checkForIframes = function () {

            var docReadyCheck, isDocReady;

            docReadyCheck = function () {
                if (document.readyState === "complete") {
                    clearInterval(isDocReady);
                    includeIframes();
                }
            };

            isDocReady = setInterval(docReadyCheck, 1000); // check once a second to see if document is complete
        };

        includeIframes = function (elementContents) {

            if (!elementContents) {
                elementContents = $(document);
            }

            var iframeCount = 0;

            elementContents.find('iframe,frame').each(function () {

                if ($(this).hasClass('jit-inspected') === false) {

                    try {

                        includeIframes($(this).contents()); // recursive call to include nested iframes

                        // attach event code for most modern browsers
                        $(this).on('load', attachEventIframe($(this))); // Browser NOT IE < 11

                        // attach event code for older Internet Explorer browsers
                        var domElement = $(this)[iframeCount]; // convert jquery object to dom element

                        if (domElement.attachEvent) { // Older IE Browser < 11
                            domElement.attachEvent('onload', attachEventIframe($(this)));
                        }

                        iframeCount++;

                    } catch (err) {
                        /* Unfortunately, if the 'includeIframes' function is manually triggered multiple times in quick succession,
                         * this 'try/catch' block may not have time to complete,
                         * and so it might error out, 
                         * and iframes that are NOT cross-site may be set to "cross-site"
                         * and activity may or may not bubble to parent page.
                         * Fortunately, this is a rare occurrence!
                         */
                        $(this).addClass('jit-inspected cross-site');
                    }

                }

            });

        };

        attachEventIframe = function (iframeItem) {
            // retrieve stored value as currentConfig will not include private userRuntimeConfig
            // when this function is called by public function, iframeRecheck
            var iframeContents = iframeItem.contents(), storeActivityEvents = store.get('activityEvents');

            try {

                iframeContents.on(storeActivityEvents, function (event) {
                    $('body').trigger(event);
                });

                iframeItem.addClass('jit-inspected'); // add "jit-inspected" class, so we don't need to check this iframe again

            } catch (ignore) {
                // nothing to do
            }

        };

        //###############################
        // Build & Return the instance of the item as a plugin
        // This is your construct.
        //###############################
        return this.each(function () {

            if (store.enabled) {

                store.set('idleTimerLastActivity', $.now());
                store.set('idleTimerLoggedOut', false);

                storeConfiguration();

                activityDetector();

                if (currentConfig.sessionKeepAliveTimer) {
                    startKeepSessionAlive();
                }

                startIdleTimer();

                checkForIframes();

            } else {
                alert(currentConfig.errorAlertMessage);
            }

        });
    };
}(jQuery));

function setupIdleTimeout(options) {
    window.$ && $(function () {
        if (!$.fn.idleTimeout)
            return;

        var idleOpt = {
            idleTimeLimit: 510,
            idleCheckHeartbeat: 2,
            useTopBar: true,
            dialogDisplayLimit: 90,
            redirectUrl: '/timeout.aspx?signout=1',
            sessionKeepAliveTimer: 120,
            sessionKeepAliveUrl: '/ping.aspx'
        };

        if (!options || options.lang != 'en-US') {
            idleOpt.topBarText = 'Bir süredir işlem yapmadığınızdan <span id="idletimeout-seconds">{seconds}</span>&nbsp;saniye içinde oturumunuz kapanacaktır. ' +
                '<a id="idletimeout-resume" href="javascript:;" style="color:#fff; font-weight:bold; font-size: 14px; text-decoration: underline;">Oturumunuzu açık tutmak için buraya tıklayınız</a>.';
            idleOpt.dialogTitle = 'Oturum Zaman Aşımı Uyarısı!';
        }

        if (options && options.idleTimeLimit)
            idleOpt.idleTimeLimit = options.idleTimeLimit;

        $(document).idleTimeout(idleOpt);
    });
}