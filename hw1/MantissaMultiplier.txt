






module summation(A,B,Cin,S,Cout);
input A, B, Cin;
output Cout,S;
 	 
 wire w1, w2, w3;
         
			xor xor1 (w1, A, B);
			xor xor2 (S, w1, Cin);
			and and1 (w2, w1, Cin);
			and and2 (w3, A, B);
			or  or1	(Cout, w2, w3);
			

endmodule

module deneme4 (FS, FE1, FE2, FM1, FM2, SS, SE1, SE2, SM1, SM2, S, E1, E2, E3, M1, M2, M3, M4, M5 ,overflow );
 input FS, FE1, FE2, FM1, FM2, SS, SE1, SE2, SM1, SM2;
 output S, E1, E2, E3, M1, M2, M3, M4, M5 ,overflow;
 wire carry,sum1, carry2, carry3, sum2, carry4, carry5;	 
 
assign M1=(~FM1&~FM2&SM1&~SM2)|(~FM1&~FM2&SM1&SM2)|(~FM1&FM2&~SM1&SM2)|(~FM1&FM2&SM1&~SM2)|(FM1&~FM2&~SM1&~SM2)|(FM1&~FM2&~SM1&SM2)|(FM1&FM2&~SM1&~SM2)|(FM1&FM2&SM1&SM2);
assign M2=(~FM1&~FM2&~SM1&SM2)|(~FM1&~FM2&SM1&SM2)|(~FM1&FM2&~SM1&~SM2)|(~FM1&FM2&SM1&~SM2)|(FM1&~FM2&~SM1&SM2)|(FM1&~FM2&SM1&SM2)|(FM1&FM2&~SM1&~SM2)|(FM1&FM2&SM1&~SM2);
assign M3=(~FM1&FM2&SM1&~SM2)|(FM1&~FM2&~SM1&SM2)|(FM1&~FM2&SM1&~SM2);
assign M4=(~FM1&FM2&~SM1&SM2)|(~FM1&FM2&SM1&SM2)|(FM1&~FM2&SM1&SM2)|(FM1&FM2&~SM1&SM2)|(FM1&FM2&SM1&~SM2);
assign M5=(~FM1&FM2&SM1&SM2)|(FM1&FM2&~SM1&SM2)|(FM1&FM2&SM1&SM2);
assign carry=(~FM1&FM2&SM1&SM2)|(FM1&~FM2&SM1&~SM2)|(FM1&~FM2&SM1&SM2)|(FM1&FM2&~SM1&SM2)|(FM1&FM2&SM1&~SM2)|(FM1&FM2&SM1&SM2);
 
 summation(FE2, SE2, 1, sum1, carry2);
 summation(carry, sum1, 0, E3, carry3);
 summation(FE1, carry3, carry2, sum2, carry4);
 summation(SE1, sum2, 0, E2, carry5);
 summation(carry4, carry5, 0, E1, overflow);
 xor sign (S, FS, SS);
  
 
endmodule
